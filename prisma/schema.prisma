generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String             @id @default(cuid())
  clerkUserId      String             @unique
  firstName        String?
  lastName         String?
  email            String             @unique
  phoneNumber      String?
  role             Role?              @default(VISITOR)
  profilePicture   String?
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  societyId        String?
  buildingId       String?
  name             String?
  bookings         Booking[]
  complaints       Complaint[]
  documents        Document[]
  EmergencyContact EmergencyContact[]
  events           Event[]
  flatsOwned       Flat[]             @relation("FlatOwner")
  flatsResiding    Flat[]             @relation("FlatResident")
  notices          Notice[]           @relation("UserNotices")
  pendingAccess    PendingAccess?
  polls            Poll[]
  rsvps            RSVP[]
  societyAdmins    SocietyAdmin?
  transactions     Transaction[]      @relation("TransactionRecorder")
  building         Building?          @relation(fields: [buildingId], references: [id])
  society          Society?           @relation(fields: [societyId], references: [id])
  visitors         Visitor[]          @relation("PreApprovedBy")

  @@map("users")
}

model Society {
  id                 String          @id @default(cuid())
  name               String
  address            String
  registrationNumber String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  buildings          Building[]
  notices            Notice[]
  pendingAccess      PendingAccess[]
  societyAdmins      SocietyAdmin[]
  users              User[]
  marqueeNotices    MarqueeNotice[]

  @@map("societies")
}

model SocietyAdmin {
  id          String   @id @default(cuid())
  userId      String   @unique
  societyId   String
  societyName String
  totalFlats  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  society     Society  @relation(fields: [societyId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("society_admins")
}

model Building {
  id             String   @id @default(cuid())
  name           String
  numberOfFloors Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  societyId      String
  society        Society  @relation(fields: [societyId], references: [id])
  flats          Flat[]
  users          User[]

  @@map("buildings")
}

model Flat {
  id           String        @id @default(cuid())
  flatNumber   String
  areaSqFt     Int
  bedrooms     Int
  isOccupied   Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  buildingId   String
  ownerId      String?
  residentId   String?
  building     Building      @relation(fields: [buildingId], references: [id])
  owner        User?         @relation("FlatOwner", fields: [ownerId], references: [id])
  resident     User?         @relation("FlatResident", fields: [residentId], references: [id])
  transactions Transaction[] @relation("FlatTransactions")
  visitors     Visitor[]

  @@map("flats")
}

model Visitor {
  id                  String        @id @default(cuid())
  name                String
  phoneNumber         String
  vehicleNumber       String?
  purpose             String
  checkInTime         DateTime?
  checkOutTime        DateTime?
  gatePassId          String?
  securityCheckNotes  String?
  imageUrl            String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  visitingFlatId      String
  preApprovedByUserId String
  qrCodeToken         String?       @unique
  status              VisitorStatus @default(PENDING)
  preApprovedBy       User          @relation("PreApprovedBy", fields: [preApprovedByUserId], references: [id])
  visitingFlat        Flat          @relation(fields: [visitingFlatId], references: [id])

  @@map("visitors")
}

model Complaint {
  id          String          @id @default(cuid())
  title       String
  description String
  status      ComplaintStatus @default(OPEN)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  userId      String
  type        ComplaintType   @default(OTHER)
  user        User            @relation(fields: [userId], references: [id])

  @@map("complaints")
}

model Booking {
  id        String        @id @default(cuid())
  userId    String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  status    BookingStatus @default(BOOKED)
  facility  FacilityType
  reason    String?
  user      User          @relation(fields: [userId], references: [id])

  @@map("bookings")
}

model Notice {
  id        String   @id @default(cuid())
  title     String
  content   String
  postedAt  DateTime @default(now())
  postedBy  String
  societyId String
  user      User     @relation("UserNotices", fields: [postedBy], references: [id])
  society   Society  @relation(fields: [societyId], references: [id])

  @@map("notices")
}

model Expense {
  id          String   @id @default(cuid())
  amount      Float
  description String
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("expenses")
}

model Vendor {
  id         String      @id @default(cuid())
  name       String
  service    String
  contact    String
  email      String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  imageUrl   String?
  vendorLogs VendorLog[]

  @@map("vendors")
}

model VendorLog {
  id        String    @id @default(cuid())
  vendorId  String
  date      DateTime  @default(now())
  entryTime DateTime?
  exitTime  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  vendor    Vendor    @relation(fields: [vendorId], references: [id])

  @@map("vendor_logs")
}

model Document {
  id         String   @id @default(cuid())
  title      String
  fileUrl    String
  userId     String
  uploadedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@map("documents")
}

model Poll {
  id        String   @id @default(cuid())
  question  String
  options   String[]
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("polls")
}

model RSVP {
  id        String     @id @default(cuid())
  eventId   String
  userId    String
  response  RSVPStatus
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  event     Event      @relation(fields: [eventId], references: [id])
  user      User       @relation(fields: [userId], references: [id])

  @@map("rsvps")
}

model Event {
  id          String   @id @default(cuid())
  name        String
  description String
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  rsvps       RSVP[]

  @@map("events")
}

model EmergencyContact {
  userId      String
  id          String   @id @default(cuid())
  name        String
  phoneNumber String
  type        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  email       String
  designation String
  users       User     @relation(fields: [userId], references: [id])

  @@map("emergency_contacts")
}

model PendingAdmin {
  id                 String             @id @default(cuid())
  name               String
  email              String             @unique
  apartmentName      String
  totalFlats         Int
  status             AdminRequestStatus @default(PENDING)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  address            String
  registrationNumber String
  phoneNumber        String

  @@map("pending_admins")
}

model PendingAccess {
  id            String             @id @default(cuid())
  userId        String             @unique
  societyId     String
  requestedRole Role               @default(HOUSE_OWNER)
  status        AdminRequestStatus @default(PENDING)
  buildingId    String?
  flatId        String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  imageUrl      String?
  phoneNumber   String?
  society       Society            @relation(fields: [societyId], references: [id])
  user          User               @relation(fields: [userId], references: [id])

  @@map("pending_access")
}

model Transaction {
  id              String          @id @default(uuid())
  amount          Float
  type            TransactionType
  category        String?
  description     String?
  transactionDate DateTime        @map("transaction_date")
  paymentMethod   String?         @map("payment_method")
  payerName       String?         @map("payer_name")
  flatNumber      String?         @map("flat_number")
  forMonth        String?         @map("for_month")
  paidStatus      Boolean?        @default(true) @map("paid_status")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  flatId          String?
  recorderId      String          @map("recorder_id")
  flat            Flat?           @relation("FlatTransactions", fields: [flatId], references: [id])
  recorder        User            @relation("TransactionRecorder", fields: [recorderId], references: [id])

  @@map("transactions")
}

model Staff {
  id         String       @id
  name       String
  role       String
  salary     Int
  Attendance Attendance[]
  feedback   Feedback[]
  leave      Leave[]
  Salary     Salary[]
  shift      Shift[]
}

model Attendance {
  id       Int      @id @default(autoincrement())
  staff_id String
  date     DateTime
  checkIn  String
  checkOut String
  status   String
  Staff    Staff    @relation(fields: [staff_id], references: [id])
}

model Feedback {
  id        String   @id @default(cuid())
  staffId   String
  message   String
  createdAt DateTime @default(now())
  staff     Staff    @relation(fields: [staffId], references: [id])
}

model Leave {
  id        String   @id
  fromDate  DateTime
  toDate    DateTime
  reason    String
  leaveType String
  totalDays Int
  createdAt DateTime @default(now())
  staffId   String
  staff     Staff    @relation(fields: [staffId], references: [id])
}

model Salary {
  id       String   @id
  staff_id String
  amount   Int
  status   String
  payDate  DateTime
  Staff    Staff    @relation(fields: [staff_id], references: [id])
}

model Shift {
  id        String   @id
  staffId   String
  shiftType String
  date      DateTime
  staff     Staff    @relation(fields: [staffId], references: [id])
}


model MarqueeNotice {
  id         String   @id @default(cuid())
  content    String
  societyId  String
  society    Society  @relation(fields: [societyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum ComplaintType {
  PLUMBING
  ELECTRICAL
  CLEANING
  SECURITY
  OTHER
}

enum Role {
  SUPER_ADMIN
  SOCIETY_ADMIN
  SOCIETY_SECRETARY
  STAFF
  TECHNICIAN
  WATCHMAN
  HOUSE_OWNER
  SOCIETY_MEMBER
  VISITOR
}

enum ComplaintStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum RSVPStatus {
  GOING
  NOT_GOING
  MAYBE
}

enum VisitorStatus {
  PENDING
  CHECKED_IN
  CHECKED_OUT
}

enum BookingStatus {
  BOOKED
  CANCELLED
  COMPLETED
}

enum FacilityType {
  GYM
  SWIMMING_POOL
  CLUBHOUSE
  BANQUET_HALL
}

enum AdminRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionType {
  INCOME
  EXPENSE
}
